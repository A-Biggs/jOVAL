<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"
            xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"
            xmlns:linux-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
            xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
            elementFormDefault="qualified" version="5.11">
     <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
     <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5"/>
     <!-- =============================================================================== -->
     <!-- ===============================  SESTATUS TEST  =============================== -->
     <!-- =============================================================================== -->
     <xsd:element name="sestatus_test" substitutionGroup="oval-def:test">
          <xsd:annotation>
               <xsd:documentation>The SEStatus Test is used to check properties representing the counts of profiles and processes as per the results of the "sestatus" command. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an sestatus_object and the optional state element specifies the data to check.</xsd:documentation>
               <xsd:appinfo>
                    <oval:element_mapping>
                         <oval:test>sestatus_test</oval:test>
                         <oval:object>sestatus_object</oval:object>
                         <oval:state>sestatus_state</oval:state>
                         <oval:item>sestatus_item</oval:item>
                    </oval:element_mapping>
               </xsd:appinfo>
               <xsd:appinfo>
                    <sch:pattern id="suse-def_sestatus_tst">
                         <sch:rule context="linux-def:sestatus_test/linux-def:object">
                              <sch:assert test="@object_ref = ancestor::oval-def:oval_definitions/oval-def:objects/linux-def:sestatus_object/@id"><sch:value-of select="../@id"/> - the object child element of a sestatus_test must reference a sestatus_object</sch:assert>
                         </sch:rule>
                         <sch:rule context="linux-def:sestatus_test/linux-def:state">
                              <sch:assert test="@state_ref = ancestor::oval-def:oval_definitions/oval-def:states/linux-def:sestatus_state/@id"><sch:value-of select="../@id"/> - the state child element of a sestatustest must reference a sestatus_state</sch:assert>
                         </sch:rule>
                    </sch:pattern>
               </xsd:appinfo>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-def:TestType">
                         <xsd:sequence>
                              <xsd:element name="object" type="oval-def:ObjectRefType"/>
                              <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                         </xsd:sequence>
                    </xsd:extension>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
     <xsd:element name="sestatus_object" substitutionGroup="oval-def:object">
          <xsd:annotation>
               <xsd:documentation>The sestatus_object element is used by a sestatus test to define the different information about the current SEStatus polciy. There is actually only one object relating to SEStatus and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check SEStatus will reference the same sestatus_object which is basically an empty object element.</xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-def:ObjectType"/>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
     <xsd:element name="sestatus_state" substitutionGroup="oval-def:state">
          <xsd:annotation>
               <xsd:documentation>The SEStatus Item displays various information about the current SEStatus policy. This item maps the counts of profiles and processes as per the results of the "sestatus" command. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-def:StateType">
                         <xsd:sequence>
                              <xsd:element name="selinux_status" type="linux-def:EntityStateSEStatusType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Indicates whether SELinux module itself is enabled or disabled on your system.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="current_mode" type="linux-def:EntityStateSEStatusModeType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>This indicates whether SELinux is currently enforcing the policies or not utilizing the following values enforcing, permissive, disabled.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="mode_from_config_file" type="linux-def:EntityStateSEStatusModeType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Displays the mode from config file. </xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="loaded_policy_name" type="linux-def:EntityStateSEStatusPolicyType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Displays what type of SELinux policy is currently loaded. In pretty much all common situations, you’ll see “targeted” as the SELinux policy, as that is the default policy.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="policy_from_config_file" type="linux-def:EntityStateSEStatusPolicyType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Displays what type of SELinux policy is currently loaded. In pretty much all common situations, you’ll see “targeted” as the SELinux policy, as that is the default policy.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                         </xsd:sequence>
                    </xsd:extension>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
     <xsd:complexType name="EntityStateSEStatusType">
          <xsd:annotation>
               <xsd:documentation>
                    The EntityItemSEStatusType complex type restricts a string value to the set of SEStatus 
                    values that indicate whether SELinux module itself is enabled or disabled on your system. Keep 
                    in mind that even though this may say enabled, but SELinux might still be not technically 
                    enabled (enforced), which is really indicated by the "current_mode" value.
               </xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-def:EntityStateStringType">
                    <xsd:enumeration value="enabled">
                         <xsd:annotation>
                              <xsd:documentation>Indicates SELinux is enabled</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="disabled">
                         <xsd:annotation>
                              <xsd:documentation>Indicates SELinux is disabled</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="">
                         <xsd:annotation>
                              <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityStateSEStatusModeType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemSEStatusModeType complex type restricts a string value to the set of SEStatus Current Mode values. The empty string is also allowed to support the empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-def:EntityStateStringType">
                    <xsd:enumeration value="enforcing">
                         <xsd:annotation>
                              <xsd:documentation>'enforcing' indicates that SELinux security policy is enforced (i.e SELinux is enabled).</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="pemissive">
                         <xsd:annotation>
                              <xsd:documentation>'permissive' indicates that SELinux prints warnings instead of enforcing. This is helpful during debugging purpose when you want to know what would SELinux potentially block (without really blocking it) by looking at the SELinux logs</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="disabled">
                         <xsd:annotation>
                              <xsd:documentation>'disabled' indicates no SELinux policy is loaded. </xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="">
                         <xsd:annotation>
                              <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityStateSEStatusPolicyType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemSEStatusPolicyType complex type restricts a string value to the set of SEStatus Loaded Policy Name values. The empty string is also allowed to support the empty element associated with variable references. Note that when using pattern matches and variables care must be taken to ensure that the regular expression and variable values align with the enumerated values</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-def:EntityStateStringType">
                    <xsd:enumeration value="targeted">
                         <xsd:annotation>
                              <xsd:documentation>'targeted' indicates that only targeted processes are protected by SELinux.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="minimum">
                         <xsd:annotation>
                              <xsd:documentation>'minimum' indicates is a slight modification of targeted policy. Only few selected processes are protected in this case.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="mls">
                         <xsd:annotation>
                              <xsd:documentation>'mls' indicates Multi Level Security protection. MLS is pretty complex and pretty much not used in most situations. </xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
                    <xsd:enumeration value="">
                         <xsd:annotation>
                              <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:enumeration>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
</xsd:schema>
