<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"
            xmlns:oval-sc="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5"
            xmlns:linux-sc="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#linux"
            xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            targetNamespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#linux"
            elementFormDefault="qualified" version="5.11">
     <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5"/>
     <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5"/>
     <!-- =============================================================================== -->
     <!-- ================================  LSMOD ITEM  ================================= -->
     <!-- =============================================================================== -->
     <xsd:element name="lsmod_item" substitutionGroup="oval-sc:item">
          <xsd:annotation>
               <xsd:documentation>
                    "lsmod" is a trivial program which nicely formats the contents of the /proc/modules, showing what loadable kernel modules are currently loaded.  Each item extends 
                    the standard ItemType as defined in the oval-system-characteristics-schema and one should refer to the ItemType description for more information.
               </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-sc:ItemType">
                         <xsd:sequence>
                              <xsd:element name="module_name" type="oval-sc:EntityItemStringType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>The name of the currently loaded module</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="module_size" type="oval-sc:EntityItemIntType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Denotes the size of the module (not memory used)</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="use_count" type="oval-sc:EntityItemIntType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>Denotes the use count for the module</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="used_by" type="oval-sc:EntityItemStringType" minOccurs="0" maxOccurs="unbounded">
                                   <xsd:annotation>
                                        <xsd:documentation>
                                             "Used by" denotes this module's referring modules. The "Used by" list is sometimes incomplete (meaning, the number of used_by entities may not match the number specified by the use_count entity).  If the module controls its own unloading via a can_unload routine then the use count displayed by lsmod is always -1, irrespective of the real use count.
                                        </xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                         </xsd:sequence>
                    </xsd:extension>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
     <!-- =============================================================================== -->
     <!-- ==============================  MODPROBE ITEM  =============================== -->
     <!-- =============================================================================== -->
     <xsd:element name="modprobe_item" substitutionGroup="oval-sc:item">
          <xsd:annotation>
               <xsd:documentation>The modprobe_item captures limited information, parsing the output of the "modprobe -n -v [module_name]" command.</xsd:documentation>
               <xsd:documentation>
                    Collection of a modprobe_item is determined by the "modprobe -n -v module_name" command.  Due to the limitations of the modprobe command, and its
                    requirement for a specific module_name, only the "equals" operation is supported, as there is no method to collect this information otherwise.  To support 
                    other collection methods, variable references should be used to collect specific module names for use in collection here.
               </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-sc:ItemType">
                         <xsd:sequence>
                              <xsd:element name="module_name" type="oval-sc:EntityItemStringType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>The name of the kernel module for which information was collected</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="modprobe_line" type="oval-sc:EntityItemStringType" minOccurs="0" maxOccurs="unbounded">
                                   <xsd:annotation>
                                        <xsd:documentation>The modprobe_line element represents a single line of output from the "modprobe -n -v [module_name]" command.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                         </xsd:sequence>
                    </xsd:extension>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
     <!-- =============================================================================== -->
     <!-- ==============================  KERNELMODULE ITEM  =============================== -->
     <!-- =============================================================================== -->
     <xsd:element name="kernelmodule_item" substitutionGroup="oval-sc:item">
          <xsd:annotation>
               <xsd:documentation>The kernelmodule_item captures limited information, parsing the output of the "modprobe -n -v [module_name]" command.</xsd:documentation>
               <xsd:documentation>
                    Need a combo of "lsmod", "modprobe -n -v" and potentially searching ""
                    
                    Collection of a modprobe_item is determined by the "modprobe -n -v module_name" command.  Due to the limitations of the modprobe command, and its
                    requirement for a specific module_name, only the "equals" operation is supported, as there is no method to collect this information otherwise.  To support 
                    other collection methods, variable references should be used to collect specific module names for use in collection here.
               </xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:complexContent>
                    <xsd:extension base="oval-sc:ItemType">
                         <xsd:sequence>
                              <xsd:element name="module_name" type="oval-sc:EntityItemStringType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>The name of the kernel module for which information was collected</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="loaded" type="oval-sc:EntityItemBoolType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>The loaded element is true when the collected kernel module is currently loaded; false otherwise.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                              <xsd:element name="loadable" type="oval-sc:EntityItemBoolType" minOccurs="0" maxOccurs="1">
                                   <xsd:annotation>
                                        <xsd:documentation>The loadable element is true when the collected kernel module is allowed to be loaded; false otherwise.</xsd:documentation>
                                   </xsd:annotation>
                              </xsd:element>
                         </xsd:sequence>
                    </xsd:extension>
               </xsd:complexContent>
          </xsd:complexType>
     </xsd:element>
</xsd:schema>
