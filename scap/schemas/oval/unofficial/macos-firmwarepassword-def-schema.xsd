<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5"
            xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5"
            xmlns:macos-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#macos"
            xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#macos"
            elementFormDefault="qualified" version="5.11">
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5"/>
      <!-- =============================================================================== -->
      <!-- ==========================  FIRMWARE PASSWORD TEST  =========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="firmwarepassword_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>
                        The firmwarepassword_test is used to determine the status of File Vault disk encryption.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references an firmwarepassword_object and the optional state element references an firmwarepassword_state that specifies the information to check.
                  </xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>firmwarepassword_test</oval:test>
                              <oval:object>firmwarepassword_object</oval:object>
                              <oval:state>firmwarepassword_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#macos">firmwarepassword_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="macos-def_firmwarepasswordtst">
                              <sch:rule context="macos-def:firmwarepassword_test/macos-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/macos-def:firmwarepassword_object/@id"><sch:value-of select="../@id"/> - the object child element of an firmwarepassword_test must reference an firmwarepassword_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="macos-def:firmwarepassword_test/macos-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/macos-def:firmwarepassword_state/@id"><sch:value-of select="../@id"/> - the state child element of an firmwarepassword_test must reference an firmwarepassword_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType" />
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="firmwarepassword_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>
                        The firmwarepassword_object is used by a firmwarepassword_test to query the status of the firmwarepasswd command. It is a singleton object.
                  </xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="macos-def_firmwarepassword_object_verify_filter_state">
                              <sch:rule context="macos-def:firmwarepassword_object//oval-def:filter">
                                    <sch:let name="parent_object" value="ancestor::macos-def:firmwarepassword_object"/>
                                    <sch:let name="parent_object_id" value="$parent_object/@id"/>
                                    <sch:let name="state_ref" value="."/>
                                    <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                                    <sch:let name="state_name" value="local-name($reffed_state)"/>
                                    <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                                    <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#macos') and ($state_name='firmwarepassword_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type. </sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"></xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="firmwarepassword_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The firmwarepassword_state is used to check the firmwarepasswd status.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The status element describes whether a firmware password is enabled.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
</xsd:schema>
